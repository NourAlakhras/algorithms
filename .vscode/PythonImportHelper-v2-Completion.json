[
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "brute_force",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def brute_force(numbers, subarray_size):\n    return [1, 2, 3]\ndef divide_and_conquer(numbers, subarray_size):\n    return [1, 2, 3]\ndef dynamic_Programming(numbers, subarray_size):\n    n = len(numbers)\n    dp = [0] * n\n    # Initialize the dynamic programming array\n    dp[0] = numbers[0]\n    for i in range(1, n):",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "divide_and_conquer",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def divide_and_conquer(numbers, subarray_size):\n    return [1, 2, 3]\ndef dynamic_Programming(numbers, subarray_size):\n    n = len(numbers)\n    dp = [0] * n\n    # Initialize the dynamic programming array\n    dp[0] = numbers[0]\n    for i in range(1, n):\n        dp[i] = max(dp[i-1] + numbers[i], numbers[i])\n    # Find the subarray with the maximum sum",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "dynamic_Programming",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def dynamic_Programming(numbers, subarray_size):\n    n = len(numbers)\n    dp = [0] * n\n    # Initialize the dynamic programming array\n    dp[0] = numbers[0]\n    for i in range(1, n):\n        dp[i] = max(dp[i-1] + numbers[i], numbers[i])\n    # Find the subarray with the maximum sum\n    max_sum_index = dp.index(max(dp))\n    max_subarray = numbers[max_sum_index - subarray_size + 1: max_sum_index + 1]",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "greedy",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def greedy(numbers, subarray_size):\n    start = 0\n    current_sum = 0\n    max_sum = float('-inf')\n    max_subarray = []\n    for end, num in enumerate(numbers):\n        current_sum += num\n        if end - start + 1 == subarray_size:\n            if current_sum > max_sum:\n                max_sum = current_sum",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def index():\n    result = None\n    if request.method == 'POST':\n        number_array = list(map(int, request.form['numberArray'].split(',')))\n        subarray_size = int(request.form['subarraySize'])\n        algorithm = request.form['algorithm']\n        match algorithm:\n            case 'bruteforce': result = brute_force(number_array, subarray_size)\n            case 'divideandconquer': result = divide_and_conquer(number_array, subarray_size)\n            case 'dynamicprogramming': result = dynamic_Programming(number_array, subarray_size)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app = Flask(__name__)\ndef brute_force(numbers, subarray_size):\n    return [1, 2, 3]\ndef divide_and_conquer(numbers, subarray_size):\n    return [1, 2, 3]\ndef dynamic_Programming(numbers, subarray_size):\n    n = len(numbers)\n    dp = [0] * n\n    # Initialize the dynamic programming array\n    dp[0] = numbers[0]",
        "detail": "app",
        "documentation": {}
    }
]